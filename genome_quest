#!/usr/bin/perl
use strict;
use Getopt::Long qw(:config posix_default no_ignore_case gnu_compat);
use Statistics::Lite qw(mean);
use Statistics::Basic qw(:all); #cpanm Statistics::Basic で導入しておく必要あり
#version history=============================================================================
#v0.1 contig両末端の末端2000bpからprimer作成、リピートマスクのdefaultは16
#v0.2 カバレッジ中央値をとるカラムを間違えていたので修正(column9:Median_foldから取る)。top10lengthからのみ集めるように修正。末端抽出サイズを選択するフラグ追加。
#0.3 カバレッジ中央値を10000bp以上のcontigからとり、それらからSDx3（99%正確）を計算し、ばらつきを求める。SDx3範囲内のcontigのみprimerを設計する。SDを使うため、カバレッジ中央値はカバレッジ平均値に変更。
#0.4 primerがないcontigでprimer名がずれる問題を修正。$minsize以上で異常なカバレッジのcontig名を別出力するよう修正
#0.5 平均カバレッジ、残す最大カバレッジ、最小カバレッジのオプション指定に対応
#0.6 blobtoolsでのplotに対応(blobtools、numpy、matplotlib、samtools、sminimap2、diamond,bwaをインストール)
#0.61 diamond検索クエリ配列の最小サイズフラグを設定。それ以下は検索しない
#0.63 taxonkitサブルーチン&taxidを導入。contigにクエリ情報を追加（blobtools実行時のみ）。taxonkitはdatabaseファイルもいるので準備を忘れないこと(cp names.dmp nodes.dmp $HOME/.taxonkit/)
#0.7 indexingで検索高速化、-primer noに変更。
#dependency==================================================================================
##primer3(primer creation)
##primer3_masker(repeat mask)
##Genome Tester4(k-mer count)
##bbmap(merge pair reads)
##blobtools(contig plot)
##bwa(mapping for blobtools)
#parameters===================================================================================
my $contig = "";
my $kmer = "list";
my $mask = "masked.fa";
my $fastq1 = "";
my $fastq2 = "";
my $minsize = "2000";
my $thread = "24";
my $kmersize = "16";
my $end = "1000";
my $select1 = "27,47,63,77,89,99,107,115,121,127";
my $select2 = "27,47,63,77,89,99,107,115,121,127,141,155,171,191,205";
my $meancov = "";
my $maximumcov = "";
my $minimumcov = "";
my $diamonddb = "";
my $evalue = "1e-50";
my $taxiddb = "/root/uniprot_ref_proteomes.taxids";
my $contiglimit = 500;
my $mapper = "minimap2";
my $primerrun = "no";

#option=======================================================================================
GetOptions('f=s' => \$contig,'1=s' => \$fastq1,'2=s' => \$fastq2,'k=i' => \$kmersize,'l=i' => \$end,'mc=i' => \$meancov,'minc=i' => \$minimumcov,'maxc=i' => \$maximumcov,'db=s' => \$diamonddb,'e=s' => \$evalue,'taxdb=s' => \$taxiddb,'t=i' => \$thread,'cl=i' => \$contiglimit,'map=s' => \$mapper,'primer=s' => \$primerrun);
#title========================================================================================
print "=============================================================================\n";
print "#genome quest version0.2\t2018 11 13\n";
print "Contact\: Kazuma Uesaka \<kazumaxneo\@gmail.com\>\n\n";
print "Usage\: genome quest \[options\]\n";
print "Options\:\n";
print "\t-f\tassembly fasta\n";
print "\t-1\tpaired read 1\n";
print "\t-2\tpaired read 2\n";
print "\t-i\tkmersize \(default 16\)\n";
print "\t-t\tthread number \(default 14\)\n";
print "\t-l\textraction size from the end of contig \(default 1000\)\n";
print "\t-mc\tmean coverage \(default \"\"\)\n";
print "\t-maxc\tmaximum coverage to keep \(default \"\"\)\n";
print "\t-minc\tminimum coverage to keep \(default \"\"\)\n";
print "\t-primer\tprimer creation  \(yes\|no\)\(default yes\)\n";
print "\t-map\tmapping tool for blobtools coverage plot\(minimap2\|bwa\) \(default minimap2\)\n";
print "\t-cl\tminimum contig length for diamond blastx search \(default 500\)\n";
print "\t-e\tevalue threshould for blastx uisng diamond \(default 1e-50\)\n";
print "\t-db\tpath of diamond protein database for blobtools plotting \(default \-\)\n";
print "\t-taxdb\tNCBI taxonomy ID database file\(default \/root\/uniprot_ref_proteomes\.taxids\)\n\n\n";
print "ex1\. de novo assembly and design primer\:\t\t\tgenome quest \-1 pair1\.fq \-2 pair2\.fq \-primer yes\n";
print "ex2\. design primer using user prepared contig\:\t\t\tgenome quest \-f contig\.fasta \-1 pair1\.fq \-2 pair2\.fq \-primer yes\n";
print "ex3\. blobplots using user prepared contig\:\tgenome quest \-f contig\.fasta \-1 pair1\.fq \-2 pair2\.fq -db uniprot_ref_proteomes.fasta \-e 1e\-25 \-primer no\n\n";
print "=============================================================================\n";

#error
die "\npaired-end fastq files are required !\n\n\n" if($fastq1 eq "");
die "\npaired-end fastq files are required !\n\n\n" if($fastq2 eq "");
#subroutine_part1==============================================================================
&assembly if($contig eq "");
system("cp spades_outdir/scaffolds.fasta .") if($contig eq "");
$contig = "scaffolds.fasta" if($contig eq "");
&blastx unless($diamonddb eq "");
&blobtool unless($diamonddb eq "");
&coverage;
#global process================================================================================
open INPUT1, "<mapping.stats" or die "cant open mapping\.stats file!\n";

my $i = 1;my @cov = "";my @size = "";my @gc = "";my $total = 0;my @medi = "";my $meanvalue = 0;my $standarddivision = 0;my $sd = 0;
my $stats = <INPUT1>;
while (my $stats = <INPUT1>) {
	chomp($stats);
	my @box1 = split(/\t/, $stats);
	$cov[$i] = $box1[9];#column5 Covered_percent
	$size[$i] = $box1[2];#column3 Length
	
	$gc[$i] = $box1[3];#column4 Ref_GC
	push(@medi,$cov[$i]) if($size[$i] > 10000);#10000bp以上のcoverageについて計算
	$i++;
}
$meanvalue = mean @medi; #median value

$sd = stddev @medi;
unless($meancov eq ""){ #平均coverage指定があるなら、それに置き換える
	$meanvalue = $meancov;
}
$maximumcov = $meanvalue + ($sd * 3) if($maximumcov eq "");
$minimumcov = $meanvalue - ($sd * 3) if($minimumcov eq "");

open MED, ">mean";
print MED "#meanvalue\tstandard_deviation\tmaximumcov\tminimumcov\n";
print MED "$meanvalue\t$sd\t$maximumcov\t$minimumcov\n";
#subroutine_part2=================================================================================================
&taxid unless($diamonddb eq "");
system("mkdir statistics");

unless($primerrun eq "yes"){
	system("mv mapping.stats statistics/");
	system("mv mean statistics/");
	exit;
}
if($primerrun eq "no"){
	system("mv mapping.stats mean/ statistics");
	system("mv mean statistics/");
	exit;
}

system("mkdir temp");
#subroutine_part3=================================================================================================
&masking;
&nnn;
&extract;
&design;
&extract2;
&cleanup;
exit;

#==================================================================================================================
#===============================================subroutine=========================================================
sub assembly {
	system("bbmerge.sh in1=$fastq1 in2=$fastq2 out=merged.fq");
	system("sleep 5s");
	system("spades.py -k $select2 --careful -t $thread -o spades_outdir -1 $fastq1 -2 $fastq2 --merged merged.fq");
}

#==================================================================================================================
sub coverage {
	print "bbmap coverage\n";
	system("bbmap.sh ref=$contig nodisk in1=$fastq1 in2=$fastq2 covstats=mapping.stats");
	system("sleep 3s");
}
#==================================================================================================================
sub blobtool {
	print "blobtools coverage plot\n";
	system("mkdir blobtools");
	system("sleep 3s");
	
	if ($mapper eq "bwa"){
		system("bwa index -a is $contig");
		system("bwa mem -t $thread $contig $fastq1 $fastq2 > mapped.sam");
		system("rm mapped.sam \*.amb \*.bwt \*.ann \*amb \*.pac \*.sa");
	}elsif($mapper eq "minimap2"){
		system("minimap2 -ax sr -t $thread $contig $fastq1 $fastq2 > mapped.sam");
	}
	system("sleep 3s");
	system("samtools sort -O BAM -@ $thread mapped.sam > blobtools/mapped.bam");
	system("sleep 3s");
	system("samtools index -@ $thread blobtools/mapped.bam");
	system("sleep 3s");
	system("blobtools create -i $contig -b blobtools/mapped.bam -t blastx-out");
	system("sleep 3s");
	system("blobtools plot -i blobDB.json");
	system("mv blob* blobtools/");
	
	
}

#==================================================================================================================
sub masking {
	system("glistmaker $contig -w $kmersize -c 2 -o $kmer");
	system("sleep 3s");

	system("primer3_masker -a 2 -l list_${kmersize}.list $contig |fold -w 80 > $mask");
}

#==================================================================================================================
sub nnn {
	#1 NNNに置換、1配列1行ずつに変換
	open INPUT1, "<masked.fa" or die "cant open input1 file!\n";
	open OUT1, ">NNN_masked.fa";
	my $count = 1;
	my @right = ();my @left = ();my $i = 0;
	while (my $line = <INPUT1>) {
		chomp($line);
		if($line =~ "\>"){#if開始
			print OUT1 "\n$line\n" unless($count == 1);
			print OUT1 "$line\n" if($count == 1);
			$count++;
		}else{
			$line =~ s/[atgc]/N/g;
			print OUT1 "$line";
		}
	}
}

#==================================================================================================================
sub extract {
#2 2000bp以下の配列を除外。それからcontig両末端1000bpずつを抽出。末端127merは除きその内側873bpずつだけ保存。
	open INPUT2, "<NNN_masked.fa" or die "cant open input2 file!\n";
	open OUT2, ">NNN_masked_border1000bps.fa";
	open ABNORMAL, ">abnormal.txt";
	print ABNORMAL "name\tcoverage\n";
	my @right = ();my @left = ();my $i = 0;
	my $substract = $end - 127;
	while (my $line = <INPUT2>) {
		$i++;
		chomp($line);
		if($line =~ "\>"){#if開始
		my $line2 = <INPUT2>;#次の行を読み込み
		chomp($line2);
		print 
		next if($size[$i] <= $minsize);
		print ABNORMAL "$line\t$cov[$i]\n" unless($cov[$i] < $maximumcov && $cov[$i] > $minimumcov);
		next unless($cov[$i] < $maximumcov && $cov[$i] > $minimumcov);
		my $left = substr($line2,0,$end);#先頭-1000文字を切り出す
		my $left2 = substr($left,-$substract);#先頭127文字を捨てる
		my $right = substr($line2,-$end);#最後の1000文字目から最後までの文字列を切り出す
		my $right2 = substr($right,0,$substract);#先頭873文字を切り出す
		print OUT2 "$line";
		print OUT2 "L\n$left2\n";
		print OUT2 "$line\R\n$right2\n";
		}#if終了
	}
}

#==================================================================================================================
sub design {
	#3 primerデザイン
	system("mkdir designed_primer");
	open INPUT3, "<NNN_masked_border1000bps.fa" or die "cant open input3 file!\n";
	open OUT3, ">list";
	my $count = 1;

	while (my $headerF = <INPUT3>) {
		chomp($headerF);
		if($headerF =~ "\>"){#if開始
			my @number = split(/\_/, $headerF);
		 	print "Primer of contig $number[1] is being created now.\n";
		 	my $aaa = $number[1];
		 	my $seqF = <INPUT3>;#2行目を読み込み
		 	my $headerR = <INPUT3>;#3行目を読み込み
		 	my $seqR = <INPUT3>;#4行目を読み込み
		 	chomp($seqF);chomp($headerR);chomp($seqR);
		 	open LEFT, ">configL";#1つ前のループのconfigLを消す
		 	open RIGHT, ">configR";#1つ前のループのconfigRを消す
	
print LEFT << "EOF";
SEQUENCE_ID=example
SEQUENCE_TEMPLATE=$seqF
PRIMER_TASK=pick_right_only
PRIMER_PICK_LEFT_PRIMER=0
PRIMER_PICK_INTERNAL_OLIGO=0
PRIMER_PICK_RIGHT_PRIMER=1
PRIMER_OPT_SIZE=26
PRIMER_MIN_SIZE=22
PRIMER_MAX_SIZE=30
PRIMER_PRODUCT_SIZE_RANGE=75-150
PRIMER_EXPLAIN_FLAG=1
PRIMER_NUM_RETURN=1
PRIMER_MAX_GC=60
PRIMER_MAX_END_GC=3
PRIMER_MIN_TM=55
PRIMER_OPT_TM=60
PRIMER_MAX_TM=63
PRIMER_MUST_MATCH_THREE_PRIME=nnnns
PRIMER_MUST_MATCH_FIVE_PRIME=wnnnn
=
EOF
			system("sleep 0.1s");
			system("primer3_core configL > designed_primer/primer${number[1]}L");
			print OUT3 "primer${number[1]}L\n";
			
print RIGHT << "EOF";
SEQUENCE_ID=example
SEQUENCE_TEMPLATE=$seqR
PRIMER_TASK=pick_left_only
PRIMER_PICK_LEFT_PRIMER=1
PRIMER_PICK_INTERNAL_OLIGO=0
PRIMER_PICK_RIGHT_PRIMER=0
PRIMER_OPT_SIZE=26
PRIMER_MIN_SIZE=22
PRIMER_MAX_SIZE=30
PRIMER_PRODUCT_SIZE_RANGE=75-150
PRIMER_EXPLAIN_FLAG=1
PRIMER_NUM_RETURN=1
PRIMER_MAX_GC=60
PRIMER_MAX_END_GC=3
PRIMER_MIN_TM=55
PRIMER_OPT_TM=60
PRIMER_MAX_TM=63
PRIMER_MUST_MATCH_THREE_PRIME=nnnns
PRIMER_MUST_MATCH_FIVE_PRIME=wnnnn
=
EOF
			system("sleep 0.1s");
			system("primer3_core configR > designed_primer/primer${number[1]}R");
			print OUT3 "primer${number[1]}R\n";
		}
		$count++;
	}
}

#==================================================================================================================
sub extract2 {
	#4 primerだけ抽出
	open INPUT4, "<list" or die "cant open input4 file!\n";
	open OUT4, ">primer_list";
	open OUT5, ">primer.fasta";
	while (my $list = <INPUT4>) {
		chomp($list);
		my $list2 = <INPUT4>;
		$list =~ s/L//g;
		$list =~ s/R//g;
		my $name = $list;
		$name =~ s/primer//g;
		print OUT4 "\>$list\n";
		open INPUT5L, "<designed_primer/primer${name}L" or die "cant open INPUT5L file!\n";
		while (my $line5 = <INPUT5L>) {
			chomp($line5);
			my @array = split(/\=/, $line5);
			print OUT4 "$line5\n" if($array[0] eq "PRIMER_RIGHT_0_SEQUENCE");
			print OUT5 ">${list}L\n$array[1]\n" if($array[0] eq "PRIMER_RIGHT_0_SEQUENCE");
		}
		open INPUT5R, "<designed_primer/primer${name}R" or die "cant open INPUT5R file!\n";
		while (my $line5 = <INPUT5R>) {
			chomp($line5);
			my @array = split(/\=/, $line5);
			print OUT4 "$line5\n" if($array[0] eq "PRIMER_LEFT_0_SEQUENCE");
			print OUT5 ">${list}R\n$array[1]\n" if($array[0] eq "PRIMER_LEFT_0_SEQUENCE");
		}
		
	}
	system("rm configL configR list NNN_masked.fa");
}
#==================================================================================================================
sub cleanup {
	system("mkdir primers");
	system("sleep 3s");
	system("mv list_16.list masked.fa NNN_masked_border1000bps.fa designed_primer temp/");
	system("mv primer_list primer.fasta designed_primer primers/");
	system("mv mean mapping.stats blast-out abnormal.txt statistics/");
}
#==================================================================================================================
sub blastx {
	#unipprotデータベースとproteome_taxidはユーザがダウンロードして準備する必要がある。
	die "\npaired-end fastq files are required !\n\n\n" if($fastq1 eq "");
	print "blastx to database using diamond\n";
	system("seqkit seq -m $contiglimit $contig > seq");
	system("sleep 3s");
	system("diamond blastx --query seq --db $diamonddb --outfmt 6 --max-target-seqs 1 --evalue $evalue > diamond-out");
	system("rm seq");
	open DATABASE, "</root/uniprot_ref_proteomes.taxids" or die "cant open txt file!\n";
	my @proteina0 = "";my @proteina1 = "";my @proteina2 = "";my @proteina3 = "";my @proteina4 = "";my @proteina5 = "";my @proteina6 = "";my @proteina7 = "";my @proteina8 = "";my @proteina9 = "";
	my @proteinb = "";my @proteinc = "";my @proteind = "";my @proteine = "";my @proteinf = "";my @proteing = "";my @proteinh = "";my @proteini = "";my @proteinj = "";my @proteink = "";my @proteinl = "";my @proteinm = "";my @proteinn = "";my @proteino = "";my @proteinp = "";my @proteinq = "";my @proteinr = "";my @proteins = "";my @proteint = "";my @proteinu = "";my @proteinv = "";my @proteinw = "";my @proteinx = "";my @proteiny = "";my @proteinz = "";my @proteinother = "";
	my @taxida0 = "";my @taxida1 = "";my @taxida2 = "";my @taxida3 = "";my @taxida4 = "";my @taxida5 = "";my @taxida6 = "";my @taxida7 = "";my @taxida8 = "";my @taxida9 = "";
	my @taxidb = "";my @taxidc = "";my @taxidd = "";my @taxide = "";my @taxidf = "";my @taxidg = "";my @taxidh = "";my @taxidi = "";my @taxidj = "";my @taxidk = "";my @taxidl = "";my @taxidm = "";my @taxidn = "";my @taxido = "";my @taxidp = "";my @taxidq = "";my @taxidr = "";my @taxids = "";my @taxidt = "";my @taxidu = "";my @taxidv = "";my @taxidw = "";my @taxidx = "";my @taxidy = "";my @taxidz = "";my @taxidother = "";
	my $a1 = 0;my $a2 = 0;my $a3 = 0;my $a4 = 0;my $a5 = 0;my $a6 = 0;my $a7 = 0;my $a8 = 0;my $a9 = 0;my $a0 = 0;
	my $b = "";my $c = "";my $d = "";my $e = "";my $f = "";my $g = "";my $h = "";my $i = "";my $j = "";my $k = "";my $l = "";my $m = "";my $n = "";my $o = "";my $p = "";my $q = "";my $r = "";my $s = "";my $t = "";my $u = "";my $v = "";my $w = "";my $x = "";my $y = "";my $z = "";my $other = "";
	
	print "database now cashing\n";
	while (my $line = <DATABASE>) {
		chomp($line);#改行を除く
		my @array = split(/\t/, $line);
		if($array[0] =~ /^a/i){
			if($array[0] =~ /1$/){
				$proteina1[$a1] = $array[0];$taxida1[$a1] = $array[2];$a1++;
			}elsif($array[0] =~ /2$/){
				$proteina2[$a2] = $array[0];$taxida2[$a2] = $array[2];$a2++;
			}elsif($array[0] =~ /3$/){
				$proteina3[$a3] = $array[0];$taxida3[$a3] = $array[2];$a3++;
			}elsif($array[0] =~ /4$/){
				$proteina4[$a4] = $array[0];$taxida4[$a4] = $array[2];$a4++;
			}elsif($array[0] =~ /5$/){
				$proteina5[$a5] = $array[0];$taxida5[$a5] = $array[2];$a5++;
			}elsif($array[0] =~ /6$/){
				$proteina6[$a6] = $array[0];$taxida6[$a6] = $array[2];$a6++;
			}elsif($array[0] =~ /7$/){
				$proteina7[$a7] = $array[0];$taxida7[$a7] = $array[2];$a7++;
			}elsif($array[0] =~ /8$/){
				$proteina8[$a8] = $array[0];$taxida8[$a8] = $array[2];$a8++;
			}elsif($array[0] =~ /9$/){
				$proteina9[$a9] = $array[0];$taxida9[$a9] = $array[2];$a9++;
			}elsif($array[0] =~ /0$/){
				$proteina0[$a0] = $array[0];$taxida0[$a0] = $array[2];$a0++;
			}else{
			print "a database no hit\n";
			}
		}elsif($array[0] =~ /^b/i){
			$proteinb[$b] = $array[0];$taxidb[$b] = $array[2];$b++;
		}elsif($array[0] =~ /^c/i){
			$proteinc[$c] = $array[0];$taxidc[$c] = $array[2];$c++;
		}elsif($array[0] =~ /^d/i){
			$proteind[$d] = $array[0];$taxidd[$d] = $array[2];$d++;
		}elsif($array[0] =~ /^e/i){
			$proteine[$e] = $array[0];$taxide[$e] = $array[2];$e++;
		}elsif($array[0] =~ /^f/i){
			$proteinf[$f] = $array[0];$taxidf[$f] = $array[2];$f++;
		}elsif($array[0] =~ /^g/i){
			$proteing[$g] = $array[0];$taxidg[$g] = $array[2];$g++;
		}elsif($array[0] =~ /^h/i){
			$proteinh[$h] = $array[0];$taxidh[$h] = $array[2];$h++;
		}elsif($array[0] =~ /^i/i){
			$proteini[$i] = $array[0];$taxidi[$i] = $array[2];$i++;
		}elsif($array[0] =~ /^j/i){
			$proteinj[$j] = $array[0];$taxidj[$j] = $array[2];$j++;
		}elsif($array[0] =~ /^k/i){
			$proteink[$k] = $array[0];$taxidk[$k] = $array[2];$k++;
		}elsif($array[0] =~ /^l/i){
			$proteinl[$l] = $array[0];$taxidl[$l] = $array[2];$l++;
		}elsif($array[0] =~ /^m/i){
			$proteinm[$m] = $array[0];$taxidm[$m] = $array[2];$m++;
		}elsif($array[0] =~ /^n/i){
			$proteinn[$n] = $array[0];$taxidn[$n] = $array[2];$n++;
		}elsif($array[0] =~ /^o/i){
			$proteino[$o] = $array[0];$taxido[$o] = $array[2];$o++;
		}elsif($array[0] =~ /^p/i){
			$proteinp[$p] = $array[0];$taxidp[$p] = $array[2];$p++;
		}elsif($array[0] =~ /^q/i){
			$proteinq[$q] = $array[0];$taxidq[$q] = $array[2];$q++;
		}elsif($array[0] =~ /^r/i){
			$proteinr[$r] = $array[0];$taxidr[$r] = $array[2];$r++;
		}elsif($array[0] =~ /^s/i){
			$proteins[$s] = $array[0];$taxids[$s] = $array[2];$s++;
		}elsif($array[0] =~ /^t/i){
			$proteint[$t] = $array[0];$taxidt[$t] = $array[2];$t++;
		}elsif($array[0] =~ /^u/i){
			$proteinu[$u] = $array[0];$taxidu[$u] = $array[2];$u++;
		}elsif($array[0] =~ /^v/i){
			$proteinv[$v] = $array[0];$taxidv[$v] = $array[2];$v++;
		}elsif($array[0] =~ /^w/i){
			$proteinw[$w] = $array[0];$taxidw[$w] = $array[2];$w++;
		}elsif($array[0] =~ /^x/i){
			$proteinx[$x] = $array[0];$taxidx[$x] = $array[2];$x++;
		}elsif($array[0] =~ /^y/i){
			$proteiny[$y] = $array[0];$taxidy[$y] = $array[2];$y++;
		}elsif($array[0] =~ /^z/i){
			$proteinz[$z] = $array[0];$taxidz[$z] = $array[2];$z++;
		}else{
			$proteinother[$other] = $array[0];$taxidother[$other] = $array[2];$other++;
		}
	}	
	
	open INPUT, "<diamond-out" or die "cant open txt file!\n";
	open (OUT, '>blastx-out');
	while (my $line = <INPUT>) {
		chomp($line);#改行を除く
		my @array = split(/\t/, $line);
		print "$array[0]\t$array[1]\n";
		my $id = "";
		my $i = 0;
		
		if($array[1] =~ /^a/i && $array[1] =~ /1$/){
			foreach my $var(@proteina1){
				$id = $taxida1[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /2$/){
			foreach my $var(@proteina2){
				$id = $taxida2[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /3$/){
			foreach my $var(@proteina3){
				$id = $taxida3[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /4$/){
			foreach my $var(@proteina4){
				$id = $taxida4[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /5$/){
			foreach my $var(@proteina5){
				$id = $taxida5[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /6$/){
			foreach my $var(@proteina6){
				$id = $taxida6[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /7$/){
			foreach my $var(@proteina7){
				$id = $taxida7[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /8$/){
			foreach my $var(@proteina8){
				$id = $taxida8[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /9$/){
			foreach my $var(@proteina9){
				$id = $taxida9[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^a/i && $array[1] =~ /0$/){
			foreach my $var(@proteina0){
				$id = $taxida0[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^b/i){
			foreach my $var(@proteinb){
				$id = $taxidb[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^c/i){
			foreach my $var(@proteinc){
				$id = $taxidc[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^d/i){
			foreach my $var(@proteind){
				$id = $taxidd[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^e/i){
			foreach my $var(@proteine){
				$id = $taxide[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^f/i){
			foreach my $var(@proteinf){
				$id = $taxidf[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^g/i){
			foreach my $var(@proteing){
				$id = $taxidg[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^h/i){
			foreach my $var(@proteinh){
				$id = $taxidh[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^i/i){
			foreach my $var(@proteini){
				$id = $taxidi[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^j/i){
			foreach my $var(@proteinj){
				$id = $taxidj[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^k/i){
			foreach my $var(@proteink){
				$id = $taxidk[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^l/i){
			foreach my $var(@proteinl){
				$id = $taxidl[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^m/i){
			foreach my $var(@proteinm){
				$id = $taxidm[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^n/i){
			foreach my $var(@proteinn){
				$id = $taxidn[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^o/i){
			foreach my $var(@proteino){
				$id = $taxido[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^p/i){
			foreach my $var(@proteinp){
				$id = $taxidp[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^q/i){
			foreach my $var(@proteinq){
				$id = $taxidq[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^r/i){
			foreach my $var(@proteinr){
				$id = $taxidr[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^s/i){
			foreach my $var(@proteins){
				$id = $taxids[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^t/i){
			foreach my $var(@proteint){
				$id = $taxidt[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^u/i){
			foreach my $var(@proteinu){
				$id = $taxidu[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^v/i){
			foreach my $var(@proteinv){
				$id = $taxidv[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^w/i){
			foreach my $var(@proteinw){
				$id = $taxidw[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^x/i){
			foreach my $var(@proteinx){
				$id = $taxidx[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^y/i){
			foreach my $var(@proteiny){
				$id = $taxidy[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}elsif($array[1] =~ /^z/i){
			foreach my $var(@proteinz){
				$id = $taxidz[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}else{
			foreach my $var(@proteinother){
				$id = $taxidother[$i] if($var eq $array[1]);
				$i++;
				last if($var eq $array[1]);
			}
		}
		print OUT "$array[0]\t$id\t$array[2]\n";
	}
}

#==================================================================================================================
sub taxid {
	system("cut -f 2 blastx-out > ids");
	system("sleep 3s");
	system("taxonkit lineage -j 8 -t ids > lineage");
	system("sleep 3s");
	system("paste blastx-out lineage > blast-out-lineage");
	system("sleep 3s");
	open BLASTRESULT, "<blast-out-lineage" or die "cant open blastx-out file!\n";
	open STAT, ">contig_statistics" or die "cant write STAT file!\n";
	open INPUTMAP, "<mapping.stats" or die "cant open mapping\.stats file!\n";

	
	my $bb = 0;my @blastname = "";my @lineagename = "";my @blasttaxid = "";
	while (my $bline = <BLASTRESULT>) {
		chomp($bline);
		my @bbox = split(/\t/, $bline);
		$blastname[$bb] = $bbox[0];
		$lineagename[$bb] = $bbox[4];
		$blasttaxid[$bb] = $bbox[5];
		$bb++;
	}
	
	my $ix = 1;my @mapname = "";
	my $statsx = <INPUTMAP>;
	while (my $statsx = <INPUTMAP>) {
		chomp($statsx);
		my @boxx = split(/\t/, $statsx);
		$mapname[$i] = $boxx[0];#column0 name
		$ix++;
		my $ccc = 0;
		foreach my $var(@blastname){
			print STAT "$statsx\t$lineagename[$ccc]\t$blasttaxid[$ccc]\n" if($var eq $mapname[$i]);
			$ccc++;
		}
	}
	system("sleep 3s");
	system("cp blast-out-lineage mapping.stats");
	system("rm lineage ids");
}
